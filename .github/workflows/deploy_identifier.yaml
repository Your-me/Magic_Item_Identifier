- name: Get API URL
id: get-url
run: |
  # Function to clean URL
  clean_url() {
    local raw_url="$1"
    echo "$raw_url" | grep -o 'https://[^[:space:]]*' | head -n 1 | tr -d '\n' | tr -d '\r'
  }
  
  # Function to validate URL format
  validate_url() {
    local url="$1"
    local pattern="^https://[a-z0-9]+\.execute-api\.eu-west-2\.amazonaws\.com/dev/item$"
    if [[ $url =~ $pattern ]]; then
      return 0
    else
      return 1
    fi
  }
  
  # Get Terraform output
  echo "Getting Terraform output..."
  RAW_URL=$(terraform output -raw api_url)
  echo "Raw output: $RAW_URL"
  
  # Clean the URL
  echo "Cleaning URL..."
  CLEAN_URL=$(clean_url "$RAW_URL")
  echo "Cleaned URL: $CLEAN_URL"
  
  # Validate URL format
  echo "Validating URL format..."
  if ! validate_url "$CLEAN_URL"; then
    echo "Error: Invalid URL format"
    echo "Expected format: https://<api-id>.execute-api.eu-west-2.amazonaws.com/dev/item"
    echo "Received: $CLEAN_URL"
    exit 1
  fi
  
  # Set environment variables
  echo "Setting environment variables..."
  {
    echo "API_URL=$CLEAN_URL"
    echo "api_url=$CLEAN_URL"
  } >> "$GITHUB_ENV"
  
  # Set output
  echo "api_url=$CLEAN_URL" >> "$GITHUB_OUTPUT"
  
  echo "‚úÖ API URL validated and set to: $CLEAN_URL"

- name: Verify API URL
run: |
  API_URL="${{ env.API_URL }}"
  
  # Verify URL is set
  if [ -z "$API_URL" ]; then
    echo "‚ùå Error: API URL is empty"
    exit 1
  fi
  
  echo "üîç Verifying API URL: $API_URL"
  
  # Test URL accessibility
  echo "Testing URL accessibility..."
  RESPONSE=$(curl -s -w "\n%{http_code}" "$API_URL?name=Shadowfang")
  HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
  CONTENT=$(echo "$RESPONSE" | sed '$d')
  
  # Check HTTP status
  if [ "$HTTP_CODE" -ne 200 ]; then
    echo "‚ùå Error: HTTP status $HTTP_CODE"
    echo "Response: $CONTENT"
    exit 1
  fi
  
  echo "‚úÖ API URL verified successfully"